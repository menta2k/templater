name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        check-latest: true
    
    - name: Run tests
      run: go test -v -race ./...
    
    - name: Run go vet
      run: go vet ./...

  release:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        check-latest: true
    
    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl
    
    - name: Build binaries
      env:
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        
        # Build with version info
        VERSION=${GITHUB_REF#refs/tags/}
        LDFLAGS="-w -s -X main.version=${VERSION}"
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o dist/templater-linux-amd64 ./cmd/templater
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o dist/templater-linux-arm64 ./cmd/templater
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o dist/templater-windows-amd64.exe ./cmd/templater
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o dist/templater-darwin-amd64 ./cmd/templater
        
        # macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o dist/templater-darwin-arm64 ./cmd/templater
    
    - name: Compress binaries with UPX
      run: |
        echo "Original sizes:"
        ls -lh dist/
        
        # Compress each binary with UPX (continue on failure)
        for binary in dist/templater-*; do
          echo "Compressing ${binary}..."
          upx --best --lzma "${binary}" || echo "UPX compression failed for ${binary}, continuing..."
        done
        
        echo "Compressed sizes:"
        ls -lh dist/
    
    - name: Create release archives
      run: |
        cd dist
        
        # Create tar.gz for Unix systems
        tar -czf templater-linux-amd64.tar.gz templater-linux-amd64
        tar -czf templater-linux-arm64.tar.gz templater-linux-arm64
        tar -czf templater-darwin-amd64.tar.gz templater-darwin-amd64
        tar -czf templater-darwin-arm64.tar.gz templater-darwin-arm64
        
        # Create zip for Windows
        zip templater-windows-amd64.zip templater-windows-amd64.exe
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \[/{if(p) exit; if(/\['"${GITHUB_REF#refs/tags/}"'\]/) p=1} p' CHANGELOG.md > release_notes.md
        else
          echo "Release ${GITHUB_REF#refs/tags/}" > release_notes.md
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.md
        files: |
          dist/*.tar.gz
          dist/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}