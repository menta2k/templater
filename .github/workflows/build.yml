name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        check-latest: true
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: false
    
    - name: Build templater
      run: go build -v -o templater ./cmd/templater

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        check-latest: true
    
    - name: Install UPX
      run: |
        sudo apt-get update
        sudo apt-get install -y upx-ucl
    
    - name: Build templater binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-w -s" -o dist/templater-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./cmd/templater
    
    - name: Compress binary with UPX
      run: |
        # UPX compress the binary (skip if compression fails)
        upx --best --lzma dist/templater-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} || echo "UPX compression failed, continuing with uncompressed binary"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: templater-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/templater-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        check-latest: true
    
    - name: Run golangci-lint (includes security scanning)
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

